
splash_type = "fade_in";        # or "spinfinity"

if (splash_type == "spinfinity"){
    logo.image = ImageNew("special://logo");
    logo.sprite = SpriteNew();
    SpriteSetImage(logo.sprite, logo.image);


    index = 0;
    while (1){
        index_string = "" + index;
        if (index < 10) index_string = "0" + index_string;
        frame_image[index] = ImageNew("../spinfinity/throbber-" + index_string + ".png");
        if (!frame_image[index]) break;
        index++;
        }
    frame_count = index + 1;
    frame_index = 0;
    throbber_sprite = SpriteNew();

    fun refresh (){
        if (status == "normal"){
            frame_index = (frame_index + 20/50) % frame_count;
            int_frame_index = MathInt(frame_index);
            SpriteSetImage (throbber_sprite, frame_image[int_frame_index]);
            SpriteSetX (throbber_sprite, 400 - ImageGetWidth(frame_image[int_frame_index])  / 2);
            SpriteSetY (throbber_sprite, 300);
            SpriteSetOpacity (throbber_sprite, 1);
            SpriteSetX (logo.sprite, 400 - ImageGetWidth(logo.image)  / 2);
            SpriteSetY (logo.sprite, 300 - ImageGetHeight(logo.image));
            SpriteSetOpacity (logo.sprite, 1);
            }
        else{
            SpriteSetOpacity (throbber_sprite, 0);
            SpriteSetX (logo.sprite, 0);
            SpriteSetY (logo.sprite, 0);
            }
        }

    refresh ();                         # do one at the start
    PlymouthSetRefreshFunction (refresh);
    }
else if (splash_type == "fade_in"){
    logo.image = ImageNew("special://logo");
    logo.sprite = SpriteNew();
    SpriteSetImage(logo.sprite, logo.image);
    SpriteSetX (logo.sprite, 400 - ImageGetWidth(logo.image)  / 2);     # Place in the middle of the screen
    SpriteSetY (logo.sprite, 300 - ImageGetHeight(logo.image) / 2);
    logo.opacity_angle = 0;
    
    fun refresh (){
        if (status == "normal"){
            logo.opacity_angle = logo.opacity_angle + ((2 * 3.14) / 50) / 4;  # 0.25 HZ
            
            min_opacity = 0.3;
            opacity = (MathCos(logo.opacity_angle) + 1) / 2;
            opacity = opacity * (1 - min_opacity) + min_opacity;
            SpriteSetOpacity (logo.sprite, opacity);
            }
        else{
            SpriteSetOpacity (logo.sprite, 0);
            }
        }

    refresh ();                         # do one at the start
    PlymouthSetRefreshFunction (refresh);
    }
else {
    # Panic?
    
    }












#-----------------------------------------Dialogue stuff --------------------------------


status = "normal";

fun dialogue_setup(){
    local.box;
    local.lock;
    local.entry;
    local.bullet_image;
    
    box.image = ImageNew("box.png");
    lock.image = ImageNew("lock.png");
    entry.image = ImageNew("entry.png");
    bullet_image = ImageNew("bullet.png");
    
    box.sprite = SpriteNew();
    SpriteSetImage(box.sprite, box.image);
    box.x = 400 - ImageGetWidth (box.image)/2;
    box.y = 300 - ImageGetHeight(box.image)/2;
    box.z = 10000;
    SpriteSetPosition(box.sprite, box.x, box.y, box.z);
    
    lock.sprite = SpriteNew();
    SpriteSetImage(lock.sprite, lock.image);
    lock.x = box.x + ImageGetWidth(box.image)/2 - (ImageGetWidth(lock.image) + ImageGetWidth(entry.image)) / 2;
    lock.y = box.y + ImageGetHeight(box.image)/2 - ImageGetHeight(lock.image)/2;
    lock.z = box.z + 1;
    SpriteSetPosition(lock.sprite, lock.x, lock.y, lock.z);
    
    entry.sprite = SpriteNew();
    SpriteSetImage(entry.sprite, entry.image);
    entry.x = lock.x + ImageGetWidth(lock.image);
    entry.y = box.y + ImageGetHeight(box.image)/2 - ImageGetHeight(entry.image)/2;
    entry.z = box.z + 1;
    SpriteSetPosition(entry.sprite, entry.x, entry.y, entry.z);
    
    
    global.dialogue = local;
    }
    
fun dialogue_opacity(opacity){
    global.dialogue.opacity = opacity;
    local = global.dialogue;
    SpriteSetOpacity (box.sprite, opacity);
    SpriteSetOpacity (lock.sprite, opacity);
    SpriteSetOpacity (entry.sprite, opacity);
    index = 0;
    for (index = 0; bullet[index]; index++){
        SpriteSetOpacity(bullet[index].sprite, opacity);
        }
    }

fun display_normal (){
    global.status = "normal";
    if (!global.dialogue) return;
    dialogue_setup();
    dialogue_opacity (0);
    }

PlymouthSetDisplayNormalFunction(display_normal);

fun display_password (prompt, bullets){
    global.status = "password";
    if (!global.dialogue) dialogue_setup();
    dialogue_opacity (1);
    for (index = 0; dialogue.bullet[index] || index < bullets; index++){
        if (!dialogue.bullet[index]){
            dialogue.bullet[index].sprite = SpriteNew();
            SpriteSetImage(dialogue.bullet[index].sprite, dialogue.bullet_image);
            dialogue.bullet[index].x = dialogue.entry.x + index * ImageGetWidth(dialogue.bullet_image);
            SpriteSetX(dialogue.bullet[index].sprite, dialogue.bullet[index].x);
            dialogue.bullet[index].y = dialogue.entry.y + ImageGetHeight(dialogue.entry.image)/2 - ImageGetHeight(dialogue.bullet_image)/2;
            SpriteSetY(dialogue.bullet[index].sprite, dialogue.bullet[index].y);
            dialogue.bullet[index].z = dialogue.entry.z + 1;
            SpriteSetZ(dialogue.bullet[index].sprite, dialogue.bullet[index].z);
            }
        SpriteSetOpacity(dialogue.bullet[index].sprite, 0);
        if (index < bullets){
            SpriteSetOpacity(dialogue.bullet[index].sprite, 1);
            }
        }
    }
PlymouthSetDisplayPasswordFunction(display_password);
